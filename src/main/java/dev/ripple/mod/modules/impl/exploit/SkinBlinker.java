package dev.ripple.mod.modules.impl.exploit;

import dev.ripple.mod.modules.Module;
import dev.ripple.mod.modules.settings.impl.BooleanSetting;
import dev.ripple.mod.modules.settings.impl.EnumSetting;
import dev.ripple.mod.modules.settings.impl.SliderSetting;
import net.minecraft.entity.player.PlayerModelPart;

public class SkinBlinker extends Module {
    private final EnumSetting<Mode> mode = add(new EnumSetting<>("Mode",Mode.Sequential));
    private final EnumSetting<SequentialMode> seqMode = add(new EnumSetting<>("SequentialMode",SequentialMode.On, () -> mode.is(Mode.Sequential)));
    private final SliderSetting sequentialDelay = add(new SliderSetting("SequentialDelay",5,1,15, () -> mode.is(Mode.Sequential)));
    private final BooleanSetting cape = add(new BooleanSetting("Cape",true, () -> mode.is(Mode.Individual)).setParent());
    private final SliderSetting capeDelay = add(new SliderSetting("CapeDelay",10,1,15, () -> mode.is(Mode.Individual) && cape.isOpen()));
    private final BooleanSetting head = add(new BooleanSetting("Head",true, () -> mode.is(Mode.Individual)).setParent());
    private final SliderSetting headDelay = add(new SliderSetting("HeadDelay",10,1,15,() -> mode.is(Mode.Individual) && head.isOpen()));
    private final BooleanSetting jacket = add(new BooleanSetting("Jacket",true, () -> mode.is(Mode.Individual)).setParent());
    private final SliderSetting jacketDelay = add(new SliderSetting("JacketDelay",10,1,15,() -> mode.is(Mode.Individual) && jacket.isOpen()));
    private final BooleanSetting leftArm = add(new BooleanSetting("LeftArm",true, () -> mode.is(Mode.Individual)).setParent());
    private final SliderSetting leftArmDelay = add(new SliderSetting("LeftArmDelay",10,1,15,() -> mode.is(Mode.Individual) && leftArm.isOpen()));
    private final BooleanSetting rightArm = add(new BooleanSetting("RightArm",true, () -> mode.is(Mode.Individual)).setParent());
    private final SliderSetting rightArmDelay = add(new SliderSetting("RightArmDelay",10,1,15,() -> mode.is(Mode.Individual) && rightArm.isOpen()));
    private final BooleanSetting leftLeg = add(new BooleanSetting("LeftLeg",true, () -> mode.is(Mode.Individual)).setParent());
    private final SliderSetting leftLegDelay = add(new SliderSetting("LeftLegDelay",10,1,15,() -> mode.is(Mode.Individual) && leftLeg.isOpen()));
    private final BooleanSetting rightLeg = add(new BooleanSetting("RightLeg",true, () -> mode.is(Mode.Individual)).setParent());
    private final SliderSetting rightLegDelay = add(new SliderSetting("RightLegDelay",10,1,15,() -> mode.is(Mode.Individual) && rightLeg.isOpen()));
    public SkinBlinker() {
        super( "SkinBlinker", Category.Exploit);
        setChinese("皮肤闪烁");
    }

    private int ticksPassed;
    private int headTimer, jacketTimer, leftArmTimer, rightArmTimer, leftLegTimer, rightLegTimer, capeTimer;

    public enum Mode {
        Sequential,
        Individual
    }

    public enum SequentialMode {
        On,
        Off
    }

    @Override
    public void onEnable() {
        // Sequential
        ticksPassed = 0;

        // Individual
        headTimer = 0;
        jacketTimer = 0;
        capeTimer = 0;
        leftArmTimer = 0;
        rightArmTimer = 0;
        leftLegTimer = 0;
        rightLegTimer = 0;
    }

    @Override
    public void onUpdate() {
        // Sequential mode
        if (mode.getValue() == Mode.Sequential) {
            if (ticksPassed < sequentialDelay.getValue() * 5) ticksPassed++;
            else ticksPassed = 0;

            if (ticksPassed > 0) mc.options.togglePlayerModelPart(PlayerModelPart.HAT, hat());
            if (ticksPassed > sequentialDelay.getValue()) {
                mc.options.togglePlayerModelPart(PlayerModelPart.LEFT_SLEEVE, arm());
                mc.options.togglePlayerModelPart(PlayerModelPart.RIGHT_SLEEVE, arm());
            }
            if (ticksPassed > sequentialDelay.getValue() * 2)
                mc.options.togglePlayerModelPart(PlayerModelPart.JACKET, mid());
            if (ticksPassed > sequentialDelay.getValue() * 3) {
                mc.options.togglePlayerModelPart(PlayerModelPart.LEFT_PANTS_LEG, legs());
                mc.options.togglePlayerModelPart(PlayerModelPart.RIGHT_PANTS_LEG, legs());
            }
        } else {
            // Individual mode

            // cape
            if (cape.getValue()) {
                if (capeTimer < capeDelay.getValue() * 2) {
                    capeTimer++;
                    mc.options.togglePlayerModelPart(PlayerModelPart.CAPE, capeTimer <= capeDelay.getValue());
                } else capeTimer = 0;
            }

            // head
            if (head.getValue()) {
                if (headTimer < headDelay.getValue() * 2) {
                    headTimer++;
                    mc.options.togglePlayerModelPart(PlayerModelPart.HAT, headTimer <= headDelay.getValue());
                } else headTimer = 0;
            }

            // jacket
            if (jacket.getValue()) {
                if (jacketTimer < jacketDelay.getValue() * 2) {
                    jacketTimer++;
                    mc.options.togglePlayerModelPart(PlayerModelPart.JACKET, jacketTimer <= jacketDelay.getValue());
                } else jacketTimer = 0;
            }

            // left arm
            if (leftArm.getValue()) {
                if (leftArmTimer < leftArmDelay.getValue() * 2) {
                    leftArmTimer++;
                    mc.options.togglePlayerModelPart(PlayerModelPart.LEFT_SLEEVE, leftArmTimer <= leftArmDelay.getValue());
                } else leftArmTimer = 0;
            }

            // right arm
            if (rightArm.getValue()) {
                if (rightArmTimer < rightArmDelay.getValue() * 2) {
                    rightArmTimer++;
                    mc.options.togglePlayerModelPart(PlayerModelPart.RIGHT_SLEEVE, rightArmTimer <= rightArmDelay.getValue());
                } else rightArmTimer = 0;
            }

            // left leg
            if (leftLeg.getValue()) {
                if (leftLegTimer < leftLegDelay.getValue() * 2) {
                    leftLegTimer++;
                    mc.options.togglePlayerModelPart(PlayerModelPart.LEFT_PANTS_LEG, leftLegTimer <= leftLegDelay.getValue());
                } else leftLegTimer = 0;
            }

            // right leg
            if (rightLeg.getValue()) {
                if (rightLegTimer < rightLegDelay.getValue() * 2) {
                    rightLegTimer++;
                    mc.options.togglePlayerModelPart(PlayerModelPart.RIGHT_PANTS_LEG, rightLegTimer <= rightLegDelay.getValue());
                } else rightLegTimer = 0;
            }


        }
    }

    private boolean hat() {
        if (seqMode.getValue() == SequentialMode.Off) return ticksPassed <= sequentialDelay.getValue();
        else return ticksPassed > sequentialDelay.getValue();
    }

    private boolean arm() {
        if (seqMode.getValue() == SequentialMode.Off) return ticksPassed <= sequentialDelay.getValue() * 2;
        else return ticksPassed > sequentialDelay.getValue() * 2;
    }

    private boolean mid() {
        if (seqMode.getValue() == SequentialMode.Off) return ticksPassed <= sequentialDelay.getValue() * 3;
        else return ticksPassed > sequentialDelay.getValue() * 3;
    }

    private boolean legs() {
        if (seqMode.getValue() == SequentialMode.Off) return ticksPassed <= sequentialDelay.getValue() * 4;
        else return ticksPassed > sequentialDelay.getValue() * 4;
    }
}