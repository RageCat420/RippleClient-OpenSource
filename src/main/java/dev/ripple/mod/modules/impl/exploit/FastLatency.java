package dev.ripple.mod.modules.impl.exploit;

import dev.ripple.api.events.eventbus.EventHandler;
import dev.ripple.api.events.impl.PacketEvent;
import dev.ripple.api.utils.math.MathUtil;
import dev.ripple.api.utils.math.Timer;
import dev.ripple.mod.modules.Module;
import dev.ripple.mod.modules.settings.impl.BooleanSetting;
import dev.ripple.mod.modules.settings.impl.SliderSetting;
import net.minecraft.client.network.PlayerListEntry;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket;

public class FastLatency extends Module {
    public static FastLatency INSTANCE;
    private final SliderSetting delay = add(new SliderSetting("Delay", 80, 0, 1000));
    public final BooleanSetting hud = add(new BooleanSetting("HUD", false));

    public FastLatency() {
        super("FastLatency", Category.Exploit);
        setChinese("快速延迟");
        INSTANCE = this;
    }

    private final Timer timer = new Timer();
    private final Timer limitTimer = new Timer();
    private long ping;
    public int resolvedPing;

    @Override
    public String getInfo() {
        if (hud.getValue()) return null;
        PlayerListEntry playerListEntry = mc.getNetworkHandler().getPlayerListEntry(mc.player.getUuid());
        if (playerListEntry == null) {
            return "0 ms";
        } else {
            return playerListEntry.getLatency() + " ms";
        }
    }

    @Override
    public void onRender3D(MatrixStack stack) {
        if (timer.passedMs(5000) && limitTimer.every(delay.getValue())) {
            mc.getNetworkHandler().sendPacket(new RequestCommandCompletionsC2SPacket(1337, "w "));
            ping = System.currentTimeMillis();
            timer.reset();
        }
    }

    @EventHandler
    public void onPacketReceive(PacketEvent.Receive e) {
        if (e.getPacket() instanceof CommandSuggestionsS2CPacket c && c.id() == 1337) {
            resolvedPing = (int) MathUtil.clamp(System.currentTimeMillis() - ping, 0, 1000);
            timer.setMs(5000);
        }
    }
}